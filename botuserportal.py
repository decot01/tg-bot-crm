from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from pyowm import OWM
from pyowm.utils import config
from pyowm.utils import timestamps
from pyowm.utils.config import get_default_config
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import ChatType
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types.reply_keyboard import ReplyKeyboardRemove
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram import types
import sqlite3
import time 

conn = sqlite3.connect('users.db')

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
conn.execute('''CREATE TABLE IF NOT EXISTS users
             (numberid INTEGER PRIMARY KEY AUTOINCREMENT,
             username TEXT,
             usersurname TEXT,
             course TEXT,
             userage TEXT,
             pay TEXT,
             contactnumbern TEXT
             )''')

#–∫–ª–∞—Å—Å
class MyBot(FSMContext,StatesGroup): 
    # –°–æ–∑–¥–∞–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (states) –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–¥–∏–∏ –æ–ø—Ä–æ—Å–∞
    ENTER_NAME = State()
    ENTER_SURNAME = State()
    ENTER_COURSE = State()
    ENTER_AGE = State()
    ENTER_PAYMENT = State()
    ENTER_CONTACT_NUMBER = State()
    #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    def __init__(self):
        self._TOKEN = '5689385764:AAFs8vZoZGrSYUN-kqkDifoj0I0lEZh1dnU'#—Ç–æ–∫–µ–Ω
        self.bot = Bot(self._TOKEN)
        self.dp = Dispatcher(bot=self.bot, storage=MemoryStorage())
        self.memory = MemoryStorage()

    def start(self):
        #—ç–ª–µ–º–µ–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–Ω–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) –Ω–µ –∏–Ω–ª–∞–π–Ω
        help_button = KeyboardButton('/help üé´')
        price_button = KeyboardButton('/price üì†')
        info_button = KeyboardButton('/info üìä')
        pay_button = KeyboardButton('/reg üíµ')
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(help_button, price_button, info_button, pay_button)
        #—ç–ª–µ–º–µ–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–Ω–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) –∏–Ω–ª–∞–π–Ω
        inline_btn_intimeworkshop = InlineKeyboardButton('—Ç–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data='intime')
        inline_btn_lasttimeworkshop = InlineKeyboardButton('–ø—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data='lastime')
        inline_keyboard_for_events = InlineKeyboardMarkup().add(inline_btn_intimeworkshop,inline_btn_lasttimeworkshop)
        #—ç–ª–µ–º–µ–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–Ω–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) –∏–Ω–ª–∞–π–Ω
        inline_btn_infoevent1 = InlineKeyboardButton('–º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å –ø–æ —Ä–æ—Å–ø–∏—Å–∏ —à–æ–ø–µ—Ä–æ–≤', callback_data='infoevent1')

        inline_keyboard_for_infoevents = InlineKeyboardMarkup().add(inline_btn_infoevent1)
        inline_keyboard_for_infoevents.add(InlineKeyboardButton('—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤—ã—à–µüëÜ', url='https://www.tinkoff.ru/'))

        #–∫–æ–º–∞–Ω–¥—ã
        @self.dp.message_handler(commands=['start'])
        async def hello(message: types.message):
            await message.answer('–ø—Ä–∏–≤–µ—Ç –Ω–∞–ø–∏—à–∏ /help —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥')

        @self.dp.message_handler(commands=['help'])
        async def hello(message: types.message):
            await message.answer('—á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç???\n/price - —Ü–µ–Ω—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –∏ –≥—Ä—É–ø–ø–µ\n/info - –æ –Ω–∞—Å \n –µ—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–æ—Å—Ç–æ –æ—á–∏—Å—Ç–∏–µ —á–∞—Å —Å –±–æ—Ç–æ–º –∏ –≤—Å–µ!', reply_markup=keyboard)

        @self.dp.message_handler(commands=['price'])
        async def hello(message: types.message):
            await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ , –≤—ã–±–µ—Ä–∏—Ç–µ  –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç: ', reply_markup=inline_keyboard_for_events)

        @self.dp.callback_query_handler(lambda c: c.data == 'intime')
        async def process_callback_button1(callback_query: types.CallbackQuery):
            await callback_query.answer()
            await callback_query.message.answer('–í–æ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', reply_markup=inline_keyboard_for_infoevents)

        @self.dp.callback_query_handler(lambda c: c.data == 'infoevent1')
        async def process_button5_callback(callback_query: types.CallbackQuery):
            await callback_query.answer(text='—ç—Ç–æ –º–∞—Ç—Å—Ç–µ—Ä –∫–ª–∞—Å—Å –ø–æ —Ä–æ—Å–ø–∏—Å–µ —à–æ–ø–µ—Ä–æ–≤ —Ö–∑ —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –µ—â–µ)')

        @self.dp.callback_query_handler(lambda c: c.data == 'lastime')
        async def process_callback_button1(callback_query: types.CallbackQuery):
            await callback_query.answer()
            await callback_query.message.answer('–í–æ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è :\n–º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å –∫–∞—Ä—Ç–∏–Ω–∞ –≥–æ—Ä–æ–¥')

        @self.dp.message_handler(commands=['info'])
        async def hello(message: types.message):
            await message.answer('', reply_markup=keyboard)

        #—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    def register(self):

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button = KeyboardButton('–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å')
        menu_button = KeyboardButton('/menu')
        keyboard.add(button,menu_button)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/reg"
        @self.dp.message_handler(Command('reg'))
        async def start_reg(message: types.Message):
            await MyBot.ENTER_NAME.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞:', reply_markup=keyboard)

        @self.dp.message_handler(state=MyBot.ENTER_NAME)
        async def process_name(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['name'] = message.text
            await MyBot.ENTER_SURNAME.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±–µ–Ω–∫–∞:', reply_markup=keyboard)

        @self.dp.message_handler(state=MyBot.ENTER_SURNAME)
        async def process_surname(message: Message,state: FSMContext):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±–µ–Ω–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–¥–∏—é –æ–ø—Ä–æ—Å–∞
            async with state.proxy() as data:
                data['surname'] = message.text
            await MyBot.ENTER_COURSE.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∏–¥–µ—Ç —Ä–µ–±–µ–Ω–æ–∫:', reply_markup=keyboard)

        @self.dp.message_handler(state=MyBot.ENTER_COURSE)
        async def process_course(message: Message, state: FSMContext):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–¥–∏—é –æ–ø—Ä–æ—Å–∞
            async with state.proxy() as data:
                data['course'] = message.text
            await MyBot.ENTER_AGE.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:', reply_markup=keyboard)

        @self.dp.message_handler(state=MyBot.ENTER_AGE)
        async def process_age(message: Message, state: FSMContext):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–¥–∏—é –æ–ø—Ä–æ—Å–∞
            async with state.proxy() as data:
                data['age'] = message.text
            await MyBot.ENTER_PAYMENT.set()
            await message.answer('–ü—Ä–æ—à–ª–∞ –ª–∏ —É –≤–∞—Å –æ–ø–ª–∞—Ç–∞ ?', reply_markup=keyboard)

        @self.dp.message_handler(state=MyBot.ENTER_PAYMENT)
        async def process_payment(message: Message, state: FSMContext):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –æ–ø–ª–∞—Ç–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–¥–∏—é –æ–ø—Ä–æ—Å–∞
            async with state.proxy() as data:
                data['payment'] = message.text
            await MyBot.ENTER_CONTACT_NUMBER.set()
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞—è —Å +7:', reply_markup=keyboard)

        @self.dp.message_handler(state=MyBot.ENTER_CONTACT_NUMBER)
        async def process_contact_number(message: Message, state: FSMContext):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞
            async with state.proxy() as data:
                data['contact_number'] = message.text

                username = data['name']
                usersurname = data['surname']
                course = data['course']
                userage = data['age']
                pay = data['payment']
                contactnumber = data['contact_number']

                await message.answer(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!\n–í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è —Ä–µ–±–µ–Ω–∫–∞: {username}\n–§–∞–º–∏–ª–∏—è —Ä–µ–±–µ–Ω–∫–∞: {usersurname}\n–ö—É—Ä—Å/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {course}\n–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞: {userage}\n–û–ø–ª–∞—Ç–∞: {pay}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {contactnumber} —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å 2 –∞–Ω–∫–µ—Ç—É –æ—á–∏—Å—Ç–∏—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º \n —á—Ç–æ–±—ã –≤—ã—ã–π—Ç–∏ –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–ø–∏—à–∏—Ç–µ /menu " ,reply_markup=keyboard)
                conn.execute("INSERT INTO users (username, usersurname, course, userage, pay,contactnumber) VALUES (?, ?, ?, ?, ?, ?)",
                (username, usersurname, course, userage, pay, contactnumber))
                conn.commit()
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                conn.close()                 
                print("—á–µ–ª–æ–≤–µ–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!–≤—Ä–µ–º—è :",time.ctime())
            await state.finish()
        @self.dp.message_handler(commands=['menu'])
        async def hello(message: types.message):
            await message.answer('/price\n/info\n/pay\n –µ—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–æ—Å—Ç–æ –æ—á–∏—Å—Ç–∏–µ —á–∞—Å —Å –±–æ—Ç–æ–º –∏ –≤—Å–µ!', reply_markup=keyboard)
#–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        executor.start_polling(self.dp, skip_updates=True)
#—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    bot = MyBot()
    bot.start()
    bot.register()
